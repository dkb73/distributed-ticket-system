# docker-compose.yml (Complete and Corrected)

# The 'version' tag is no longer needed in modern Docker Compose, so we can remove it.

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    # --- Find this section for the 'kafka' service ---
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # This is the corrected line that fixes the problem
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_ID: booking-group

  postgres:
    image: postgres:14.1
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ticketing
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ticketing"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6.2-alpine
    container_name: redis
    ports:
      - "6379:6379"

  mongo:
    image: mongo:5.0
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh -u user -p password --quiet
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  # <--- THIS ENTIRE SECTION WAS LIKELY MISSING OR INCORRECT --->
  # --- OUR APPLICATION MICROSERVICES ---
  write-api:
    build: ./write-api
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy

  worker: # Added the worker service definition
    build: ./worker
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_started # Redis starts fast, no complex healthcheck needed

  read-api:
    build: ./read-api
    ports:
      - "3001:3001"
    depends_on:
      mongo:
        condition: service_healthy

  data-sync-service:
    build: ./data-sync-service
    depends_on:
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
  # <--- END OF APPLICATION SERVICES SECTION --->

  # --- API GATEWAY SERVICE ---
  nginx:
    image: nginx:1.21-alpine
    container_name: nginx-gateway
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - write-api
      - read-api

volumes:
  postgres_data:
  mongo_data:
